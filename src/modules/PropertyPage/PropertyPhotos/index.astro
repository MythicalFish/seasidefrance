---
import clsx from 'clsx';
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { PropertyPage } from '@data/properties/types';
import styles from './styles.module.css';
import Modal from '@components/Modal';
import PropertyGallery from '../PropertyGallery/index.astro';

interface Props {
  propertyId: number;
  mainImageUrl?: string | null;
  imageInfo: PropertyPage['roomInfo']['images'] | null;
}

const { propertyId, mainImageUrl, imageInfo } = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>(
  '/src/images/photos/**/*.{jpg,jpeg,png}',
  {
    eager: true,
  }
);

const getMainImage = (): {
  filePath: string;
  fileName: string;
  description: string;
  image: ImageMetadata;
} | null => {
  if (!mainImageUrl) return null;
  const filename = mainImageUrl.split('/').pop()?.split('?')[0];

  // If filename couldn't be extracted, we can't find a specific image.
  if (!filename) return null;

  const imageKeys = Object.keys(images);
  const imagePath = imageKeys.find(
    (path) => path.includes(`/photos/${propertyId}/`) && path.includes(filename)
  );

  // If no such imagePath is found, return null.
  if (!imagePath) return null;

  return {
    filePath: imagePath,
    fileName: filename,
    description: 'Main image',
    image: images[imagePath].default,
  };
};

let allPhotos = Object.keys(images)
  .filter((imagePath) => imagePath.includes(`/photos/${propertyId}/`))
  .map((filePath) => {
    const fileName = filePath.split('/').pop() || '';
    const fileInfo = imageInfo.find((info: any) => info.url.includes(fileName));
    const description = fileInfo?.text || '';
    return {
      filePath,
      fileName,
      description,
      image: images[filePath].default,
    };
  })
  .sort((a, b) => {
    return a.description.localeCompare(b.description);
  });

// Get the main image and move it to the front if it exists
const mainImage = getMainImage();
if (mainImage) {
  allPhotos = allPhotos.filter((photo) => photo.filePath !== mainImage.filePath);
  allPhotos.unshift(mainImage);
}

// Only take the first 3 images
allPhotos = allPhotos.slice(0, 3);
---

{
  allPhotos.length > 0 && (
    <div class={styles.gallery}>
      <div class={clsx(styles.imageGrid, 'flex flex-col lg:flex-row gap-4 lg:h-[600px]')}>
        <div class={clsx(styles.mainImageContainer, 'w-full lg:w-2/3')}>
          <button type="button" class="w-full h-full" data-open-gallery>
            <Picture
              src={allPhotos[0].image}
              alt={allPhotos[0].description || ''}
              width={800}
              height={600}
              class={styles.mainImage}
            />
          </button>
        </div>
        <div class={clsx(styles.sideImagesContainer, 'w-full lg:w-1/3')}>
          {allPhotos.slice(1).map((photo) => (
            <div class={styles.sideImageWrapper}>
              <button type="button" class="w-full h-full" data-open-gallery>
                <Picture
                  src={photo.image}
                  alt={photo.description || ''}
                  width={400}
                  height={300}
                  class={styles.sideImage}
                />
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

<div id="gallery-modal" class="hidden">
  <Modal client:load isOpen={true}>
    <div class="w-full h-full">
      <PropertyGallery propertyId={propertyId} mainImageUrl={mainImageUrl} imageInfo={imageInfo} />
    </div>
  </Modal>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('gallery-modal');
    const openButtons = document.querySelectorAll('[data-open-gallery]');

    openButtons.forEach((button) => {
      button.addEventListener('click', () => {
        if (modal) {
          modal.classList.remove('hidden');
        }
      });
    });
  });
</script>
