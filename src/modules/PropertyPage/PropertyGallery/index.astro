---
import clsx from 'clsx';
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { PropertyPage } from '@data/properties/types';
import styles from './styles.module.css';

interface Props {
  propertyId: number;
  mainImageUrl?: string | null;
  imageInfo: PropertyPage['roomInfo']['images'] | null;
}

const { propertyId, mainImageUrl, imageInfo } = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>(
  '/src/images/photos/**/*.{jpg,jpeg,png}',
  {
    eager: true,
  }
);

const getMainImage = (): {
  filePath: string;
  fileName: string;
  description: string;
  image: ImageMetadata;
} | null => {
  if (!mainImageUrl) return null;
  const filename = mainImageUrl.split('/').pop()?.split('?')[0];

  // If filename couldn't be extracted, we can't find a specific image.
  if (!filename) return null;

  const imageKeys = Object.keys(images);
  const imagePath = imageKeys.find(
    (path) => path.includes(`/photos/${propertyId}/`) && path.includes(filename)
  );

  // If no such imagePath is found, return null.
  if (!imagePath) return null;

  return {
    filePath: imagePath,
    fileName: filename,
    description: 'Main image',
    image: images[imagePath].default,
  };
};

let allPhotos = Object.keys(images)
  .filter((imagePath) => imagePath.includes(`/photos/${propertyId}/`))
  .map((filePath) => {
    const fileName = filePath.split('/').pop() || '';
    const fileInfo = imageInfo.find((info: any) => info.url.includes(fileName));
    const description = fileInfo?.text || '';
    return {
      filePath,
      fileName,
      description,
      image: images[filePath].default,
    };
  })
  .sort((a, b) => {
    return a.description.localeCompare(b.description);
  });

// Get the main image and move it to the front if it exists
const mainImage = getMainImage();
if (mainImage) {
  allPhotos = allPhotos.filter((photo) => photo.filePath !== mainImage.filePath);
  allPhotos.unshift(mainImage);
}

const carouselId = `carousel-${propertyId}`;
---

{
  allPhotos.length > 0 && (
    <div class={styles.photoGallery}>
      <div class={clsx(styles.swiper, styles.mainSwiper, 'swiper', 'main-swiper', carouselId)}>
        <div class="swiper-wrapper">
          {allPhotos.map((photo, index) => (
            <div class="swiper-slide">
              <Picture
                src={photo.image}
                alt={photo.description || ''}
                width={1013}
                height={540}
                class={styles.mainImage}
              />
            </div>
          ))}
        </div>

        <div class="swiper-button-next" />
        <div class="swiper-button-prev" />
      </div>

      <div class={styles.thumbnailContainer}>
        <div class={styles.thumbnailStrip}>
          {allPhotos.map((photo, index) => (
            <button
              class={clsx(styles.thumbnail, 'thumbnail', index === 0 ? 'active' : '')}
              data-slide-index={index}
              type="button"
            >
              <Picture
                src={photo.image}
                alt={photo.description || ''}
                width={150}
                height={100}
                class={styles.thumbnailImage}
              />
            </button>
          ))}
        </div>
      </div>
    </div>
  )
}

<script>
  import Swiper from 'swiper';
  import { Navigation, Mousewheel } from 'swiper/modules';
  import 'swiper/css';
  import 'swiper/css/navigation';

  // Initialize all carousels on the page
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.main-swiper');

    // Add delay before initialization
    setTimeout(() => {
      carousels.forEach((carousel) => {
        // Get thumbnails for this carousel first
        const thumbnails = carousel.parentElement?.querySelectorAll('.thumbnail');

        function updateActiveThumbnail(activeIndex: number) {
          if (thumbnails) {
            thumbnails.forEach((thumb, index) => {
              const isActive = index === activeIndex;
              thumb.classList.toggle('active', isActive);
              if (isActive) {
                // thumb.scrollIntoView({
                //   behavior: 'smooth',
                //   block: 'nearest',
                //   inline: 'center'
                // });
              }
            });
          }
        }

        const swiper = new Swiper(carousel as HTMLElement, {
          modules: [Navigation, Mousewheel],
          slidesPerView: 1,
          spaceBetween: 0,
          loop: true,
          autoplay: false,
          mousewheel: {
            enabled: true,
            forceToAxis: true,
            sensitivity: 1,
            releaseOnEdges: true,
            thresholdDelta: 10,
            thresholdTime: 600,
          },
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
          on: {
            slideChange: function (swiper) {
              updateActiveThumbnail(swiper.realIndex);
            },
          },
        });

        if (thumbnails) {
          thumbnails.forEach((thumbnail, index) => {
            thumbnail.addEventListener('click', () => {
              const currentSpeed = swiper.params.speed;
              swiper.params.speed = 0; // Disable animation for the jump
              swiper.slideToLoop(index);
              // Restore speed after a very short delay to ensure the jump is instant
              setTimeout(() => {
                swiper.params.speed = currentSpeed;
              }, 50); // 50ms should be enough
            });
          });
        }
      });
    }, 500);
  });
</script>
