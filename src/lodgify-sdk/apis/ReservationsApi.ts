/* tslint:disable */
/* eslint-disable */
/**
 * Lodgify Public API v2
 * API documentation for Lodgify Public API v2
 *
 * The version of the OpenAPI document: v2
 * Contact: development@lodgify.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePaymentLinkAsync200Response,
  CreatePaymentLinkAsyncRequest,
  GetAllAsync200Response,
  GetAllAsync200ResponseItemsInner,
  GetCalendarByUser200ResponseInner,
  GetCalendarByUser400Response,
  GetExternalBookingsAsync200Response,
  GetPaymentLinkAsync200Response,
  UpdateKeyCodes404Response,
  UpdateKeyCodesRequest,
  V2MessagingThreadGuidGet200ResponseInner,
  V2QuotePropertyIdGet200ResponseInner,
  V2QuotePropertyIdGetAddOnsParameterInner,
  V2QuotePropertyIdGetRoomTypesParameterInner,
  V2ReservationsBookingsIdCheckinPutRequest,
  V2ReservationsBookingsIdCheckoutPutRequest,
} from '../models/index';
import {
    CreatePaymentLinkAsync200ResponseFromJSON,
    CreatePaymentLinkAsync200ResponseToJSON,
    CreatePaymentLinkAsyncRequestFromJSON,
    CreatePaymentLinkAsyncRequestToJSON,
    GetAllAsync200ResponseFromJSON,
    GetAllAsync200ResponseToJSON,
    GetAllAsync200ResponseItemsInnerFromJSON,
    GetAllAsync200ResponseItemsInnerToJSON,
    GetCalendarByUser200ResponseInnerFromJSON,
    GetCalendarByUser200ResponseInnerToJSON,
    GetCalendarByUser400ResponseFromJSON,
    GetCalendarByUser400ResponseToJSON,
    GetExternalBookingsAsync200ResponseFromJSON,
    GetExternalBookingsAsync200ResponseToJSON,
    GetPaymentLinkAsync200ResponseFromJSON,
    GetPaymentLinkAsync200ResponseToJSON,
    UpdateKeyCodes404ResponseFromJSON,
    UpdateKeyCodes404ResponseToJSON,
    UpdateKeyCodesRequestFromJSON,
    UpdateKeyCodesRequestToJSON,
    V2MessagingThreadGuidGet200ResponseInnerFromJSON,
    V2MessagingThreadGuidGet200ResponseInnerToJSON,
    V2QuotePropertyIdGet200ResponseInnerFromJSON,
    V2QuotePropertyIdGet200ResponseInnerToJSON,
    V2QuotePropertyIdGetAddOnsParameterInnerFromJSON,
    V2QuotePropertyIdGetAddOnsParameterInnerToJSON,
    V2QuotePropertyIdGetRoomTypesParameterInnerFromJSON,
    V2QuotePropertyIdGetRoomTypesParameterInnerToJSON,
    V2ReservationsBookingsIdCheckinPutRequestFromJSON,
    V2ReservationsBookingsIdCheckinPutRequestToJSON,
    V2ReservationsBookingsIdCheckoutPutRequestFromJSON,
    V2ReservationsBookingsIdCheckoutPutRequestToJSON,
} from '../models/index';

export interface CreatePaymentLinkAsyncOperationRequest {
    id: number;
    createPaymentLinkAsyncRequest?: CreatePaymentLinkAsyncRequest;
}

export interface GetAllAsyncRequest {
    page?: number;
    size?: number;
    includeCount?: boolean;
    stayFilter?: GetAllAsyncStayFilterEnum;
    updatedSince?: Date;
    includeTransactions?: boolean;
    includeExternal?: boolean;
    includeQuoteDetails?: boolean;
    trash?: GetAllAsyncTrashEnum;
    stayFilterDate?: Date;
}

export interface GetAsyncRequest {
    id: number;
}

export interface GetCalendarByPropertyRequest {
    propertyId: number;
    start?: Date;
    end?: Date;
    includeDetails?: boolean;
}

export interface GetCalendarByRoomTypeRequest {
    propertyId: number;
    roomTypeId: number;
    start?: Date;
    end?: Date;
    includeDetails?: boolean;
}

export interface GetCalendarByUserRequest {
    start?: Date;
    end?: Date;
    includeDetails?: boolean;
}

export interface GetExternalBookingsAsyncRequest {
    id: number;
}

export interface GetPaymentLinkAsyncRequest {
    id: number;
}

export interface UpdateKeyCodesOperationRequest {
    id: number;
    updateKeyCodesRequest?: UpdateKeyCodesRequest;
}

export interface V2MessagingThreadGuidGetRequest {
    threadGuid: string;
}

export interface V2QuotePropertyIdGetRequest {
    propertyId: number;
    arrival?: Date;
    departure?: Date;
    roomTypes?: Array<V2QuotePropertyIdGetRoomTypesParameterInner>;
    addOns?: Array<V2QuotePropertyIdGetAddOnsParameterInner>;
    promotionCode?: string;
}

export interface V2ReservationsBookingsIdCheckinPutOperationRequest {
    id: number;
    v2ReservationsBookingsIdCheckinPutRequest?: V2ReservationsBookingsIdCheckinPutRequest;
}

export interface V2ReservationsBookingsIdCheckoutPutOperationRequest {
    id: number;
    v2ReservationsBookingsIdCheckoutPutRequest?: V2ReservationsBookingsIdCheckoutPutRequest;
}

/**
 * 
 */
export class ReservationsApi extends runtime.BaseAPI {

    /**
     * Create a payment link for a booking
     */
    async createPaymentLinkAsyncRaw(requestParameters: CreatePaymentLinkAsyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePaymentLinkAsync200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createPaymentLinkAsync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/reservations/bookings/{id}/quote/paymentLink`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePaymentLinkAsyncRequestToJSON(requestParameters['createPaymentLinkAsyncRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePaymentLinkAsync200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a payment link for a booking
     */
    async createPaymentLinkAsync(requestParameters: CreatePaymentLinkAsyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePaymentLinkAsync200Response> {
        const response = await this.createPaymentLinkAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of bookings matching the query parameters
     * List of bookings
     */
    async getAllAsyncRaw(requestParameters: GetAllAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllAsync200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['includeCount'] != null) {
            queryParameters['includeCount'] = requestParameters['includeCount'];
        }

        if (requestParameters['stayFilter'] != null) {
            queryParameters['stayFilter'] = requestParameters['stayFilter'];
        }

        if (requestParameters['updatedSince'] != null) {
            queryParameters['updatedSince'] = (requestParameters['updatedSince'] as any).toISOString();
        }

        if (requestParameters['includeTransactions'] != null) {
            queryParameters['includeTransactions'] = requestParameters['includeTransactions'];
        }

        if (requestParameters['includeExternal'] != null) {
            queryParameters['includeExternal'] = requestParameters['includeExternal'];
        }

        if (requestParameters['includeQuoteDetails'] != null) {
            queryParameters['includeQuoteDetails'] = requestParameters['includeQuoteDetails'];
        }

        if (requestParameters['trash'] != null) {
            queryParameters['trash'] = requestParameters['trash'];
        }

        if (requestParameters['stayFilterDate'] != null) {
            queryParameters['stayFilterDate'] = (requestParameters['stayFilterDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/reservations/bookings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllAsync200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of bookings matching the query parameters
     * List of bookings
     */
    async getAllAsync(requestParameters: GetAllAsyncRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllAsync200Response> {
        const response = await this.getAllAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Booking by id
     */
    async getAsyncRaw(requestParameters: GetAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllAsync200ResponseItemsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAsync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/reservations/bookings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllAsync200ResponseItemsInnerFromJSON(jsonValue));
    }

    /**
     * Booking by id
     */
    async getAsync(requestParameters: GetAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllAsync200ResponseItemsInner> {
        const response = await this.getAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists availability information for a given period for a specific property of the calling user.
     * Gets availability for a property
     */
    async getCalendarByPropertyRaw(requestParameters: GetCalendarByPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCalendarByUser200ResponseInner>>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling getCalendarByProperty().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['includeDetails'] != null) {
            queryParameters['includeDetails'] = requestParameters['includeDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/availability/{propertyId}`.replace(`{${"propertyId"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCalendarByUser200ResponseInnerFromJSON));
    }

    /**
     * Lists availability information for a given period for a specific property of the calling user.
     * Gets availability for a property
     */
    async getCalendarByProperty(requestParameters: GetCalendarByPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCalendarByUser200ResponseInner>> {
        const response = await this.getCalendarByPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists availability information for a given period for a specific room in a property of the calling user.
     * Gets availability for a room
     */
    async getCalendarByRoomTypeRaw(requestParameters: GetCalendarByRoomTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCalendarByUser200ResponseInner>>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling getCalendarByRoomType().'
            );
        }

        if (requestParameters['roomTypeId'] == null) {
            throw new runtime.RequiredError(
                'roomTypeId',
                'Required parameter "roomTypeId" was null or undefined when calling getCalendarByRoomType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['includeDetails'] != null) {
            queryParameters['includeDetails'] = requestParameters['includeDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/availability/{propertyId}/{roomTypeId}`.replace(`{${"propertyId"}}`, encodeURIComponent(String(requestParameters['propertyId']))).replace(`{${"roomTypeId"}}`, encodeURIComponent(String(requestParameters['roomTypeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCalendarByUser200ResponseInnerFromJSON));
    }

    /**
     * Lists availability information for a given period for a specific room in a property of the calling user.
     * Gets availability for a room
     */
    async getCalendarByRoomType(requestParameters: GetCalendarByRoomTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCalendarByUser200ResponseInner>> {
        const response = await this.getCalendarByRoomTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists availability information for a given period for the calling user.
     * Gets all availabilites
     */
    async getCalendarByUserRaw(requestParameters: GetCalendarByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCalendarByUser200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['includeDetails'] != null) {
            queryParameters['includeDetails'] = requestParameters['includeDetails'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/availability`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCalendarByUser200ResponseInnerFromJSON));
    }

    /**
     * Lists availability information for a given period for the calling user.
     * Gets all availabilites
     */
    async getCalendarByUser(requestParameters: GetCalendarByUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCalendarByUser200ResponseInner>> {
        const response = await this.getCalendarByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of external bookings belonging to the specified Id.
     * External bookings by Booking id
     */
    async getExternalBookingsAsyncRaw(requestParameters: GetExternalBookingsAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExternalBookingsAsync200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getExternalBookingsAsync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/reservations/bookings/{id}/externalBookings`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetExternalBookingsAsync200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the list of external bookings belonging to the specified Id.
     * External bookings by Booking id
     */
    async getExternalBookingsAsync(requestParameters: GetExternalBookingsAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExternalBookingsAsync200Response> {
        const response = await this.getExternalBookingsAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the next payment link for a Booking
     * Gets a booking\'s payment link
     */
    async getPaymentLinkAsyncRaw(requestParameters: GetPaymentLinkAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPaymentLinkAsync200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPaymentLinkAsync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/reservations/bookings/{id}/quote/paymentLink`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentLinkAsync200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the next payment link for a Booking
     * Gets a booking\'s payment link
     */
    async getPaymentLinkAsync(requestParameters: GetPaymentLinkAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPaymentLinkAsync200Response> {
        const response = await this.getPaymentLinkAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the access key codes of rooms belonging to a given booking.
     * Update rooms\' access key codes
     */
    async updateKeyCodesRaw(requestParameters: UpdateKeyCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateKeyCodesRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateKeyCodes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/reservations/bookings/{id}/keyCodes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateKeyCodesRequestToJSON(requestParameters['updateKeyCodesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateKeyCodesRequestFromJSON(jsonValue));
    }

    /**
     * Updates the access key codes of rooms belonging to a given booking.
     * Update rooms\' access key codes
     */
    async updateKeyCodes(requestParameters: UpdateKeyCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateKeyCodesRequest> {
        const response = await this.updateKeyCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a message thread with the specified Id.
     * Get thread details
     */
    async v2MessagingThreadGuidGetRaw(requestParameters: V2MessagingThreadGuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2MessagingThreadGuidGet200ResponseInner>>> {
        if (requestParameters['threadGuid'] == null) {
            throw new runtime.RequiredError(
                'threadGuid',
                'Required parameter "threadGuid" was null or undefined when calling v2MessagingThreadGuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/messaging/{threadGuid}`.replace(`{${"threadGuid"}}`, encodeURIComponent(String(requestParameters['threadGuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2MessagingThreadGuidGet200ResponseInnerFromJSON));
    }

    /**
     * Retrieve a message thread with the specified Id.
     * Get thread details
     */
    async v2MessagingThreadGuidGet(requestParameters: V2MessagingThreadGuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2MessagingThreadGuidGet200ResponseInner>> {
        const response = await this.v2MessagingThreadGuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a quote
     */
    async v2QuotePropertyIdGetRaw(requestParameters: V2QuotePropertyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2QuotePropertyIdGet200ResponseInner>>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling v2QuotePropertyIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['arrival'] != null) {
            queryParameters['arrival'] = (requestParameters['arrival'] as any).toISOString();
        }

        if (requestParameters['departure'] != null) {
            queryParameters['departure'] = (requestParameters['departure'] as any).toISOString();
        }

        if (requestParameters['roomTypes'] != null) {
            queryParameters['roomTypes'] = requestParameters['roomTypes'];
        }

        if (requestParameters['addOns'] != null) {
            queryParameters['addOns'] = requestParameters['addOns'];
        }

        if (requestParameters['promotionCode'] != null) {
            queryParameters['promotionCode'] = requestParameters['promotionCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/quote/{propertyId}`.replace(`{${"propertyId"}}`, encodeURIComponent(String(requestParameters['propertyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2QuotePropertyIdGet200ResponseInnerFromJSON));
    }

    /**
     * Gets a quote
     */
    async v2QuotePropertyIdGet(requestParameters: V2QuotePropertyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2QuotePropertyIdGet200ResponseInner>> {
        const response = await this.v2QuotePropertyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checkin a booking at the specified time
     * Checkin a booking at the specified time
     */
    async v2ReservationsBookingsIdCheckinPutRaw(requestParameters: V2ReservationsBookingsIdCheckinPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v2ReservationsBookingsIdCheckinPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/reservations/bookings/{id}/checkin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2ReservationsBookingsIdCheckinPutRequestToJSON(requestParameters['v2ReservationsBookingsIdCheckinPutRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Checkin a booking at the specified time
     * Checkin a booking at the specified time
     */
    async v2ReservationsBookingsIdCheckinPut(requestParameters: V2ReservationsBookingsIdCheckinPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v2ReservationsBookingsIdCheckinPutRaw(requestParameters, initOverrides);
    }

    /**
     * Checkout a booking at the specified time
     * Checkout a booking at the specified time
     */
    async v2ReservationsBookingsIdCheckoutPutRaw(requestParameters: V2ReservationsBookingsIdCheckoutPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v2ReservationsBookingsIdCheckoutPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/reservations/bookings/{id}/checkout`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2ReservationsBookingsIdCheckoutPutRequestToJSON(requestParameters['v2ReservationsBookingsIdCheckoutPutRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Checkout a booking at the specified time
     * Checkout a booking at the specified time
     */
    async v2ReservationsBookingsIdCheckoutPut(requestParameters: V2ReservationsBookingsIdCheckoutPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.v2ReservationsBookingsIdCheckoutPutRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetAllAsyncStayFilterEnum = {
    Upcoming: 'Upcoming',
    Current: 'Current',
    Historic: 'Historic',
    All: 'All',
    ArrivalDate: 'ArrivalDate',
    DepartureDate: 'DepartureDate'
} as const;
export type GetAllAsyncStayFilterEnum = typeof GetAllAsyncStayFilterEnum[keyof typeof GetAllAsyncStayFilterEnum];
/**
 * @export
 */
export const GetAllAsyncTrashEnum = {
    False: 'False',
    True: 'True',
    All: 'All'
} as const;
export type GetAllAsyncTrashEnum = typeof GetAllAsyncTrashEnum[keyof typeof GetAllAsyncTrashEnum];
