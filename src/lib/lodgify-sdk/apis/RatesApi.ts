/* tslint:disable */
/* eslint-disable */
/**
 * Lodgify Public API v2
 * API documentation for Lodgify Public API v2
 *
 * The version of the OpenAPI document: v2
 * Contact: development@lodgify.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllPropertiesAsync400Response,
  RatesCalendarV2200Response,
  RatesCalendarV2200ResponseRateSettings,
} from '../models/index';
import {
    GetAllPropertiesAsync400ResponseFromJSON,
    GetAllPropertiesAsync400ResponseToJSON,
    RatesCalendarV2200ResponseFromJSON,
    RatesCalendarV2200ResponseToJSON,
    RatesCalendarV2200ResponseRateSettingsFromJSON,
    RatesCalendarV2200ResponseRateSettingsToJSON,
} from '../models/index';

export interface RateSettingsV2Request {
    houseId?: number;
}

export interface RatesCalendarV2Request {
    roomTypeId: number;
    houseId: number;
    startDate: string;
    endDate: string;
}

/**
 * 
 */
export class RatesApi extends runtime.BaseAPI {

    /**
     * Returns rate settings for the houseId.
     * Rate\'s settings
     */
    async rateSettingsV2Raw(requestParameters: RateSettingsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatesCalendarV2200ResponseRateSettings>> {
        const queryParameters: any = {};

        if (requestParameters['houseId'] != null) {
            queryParameters['houseId'] = requestParameters['houseId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/rates/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatesCalendarV2200ResponseRateSettingsFromJSON(jsonValue));
    }

    /**
     * Returns rate settings for the houseId.
     * Rate\'s settings
     */
    async rateSettingsV2(requestParameters: RateSettingsV2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatesCalendarV2200ResponseRateSettings> {
        const response = await this.rateSettingsV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns daily rates calendar for room types requested by roomTypeId or houseId.
     * Daily rates
     */
    async ratesCalendarV2Raw(requestParameters: RatesCalendarV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatesCalendarV2200Response>> {
        if (requestParameters['roomTypeId'] == null) {
            throw new runtime.RequiredError(
                'roomTypeId',
                'Required parameter "roomTypeId" was null or undefined when calling ratesCalendarV2().'
            );
        }

        if (requestParameters['houseId'] == null) {
            throw new runtime.RequiredError(
                'houseId',
                'Required parameter "houseId" was null or undefined when calling ratesCalendarV2().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling ratesCalendarV2().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling ratesCalendarV2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roomTypeId'] != null) {
            queryParameters['RoomTypeId'] = requestParameters['roomTypeId'];
        }

        if (requestParameters['houseId'] != null) {
            queryParameters['HouseId'] = requestParameters['houseId'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['StartDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['EndDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/rates/calendar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatesCalendarV2200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns daily rates calendar for room types requested by roomTypeId or houseId.
     * Daily rates
     */
    async ratesCalendarV2(requestParameters: RatesCalendarV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatesCalendarV2200Response> {
        const response = await this.ratesCalendarV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
