/* tslint:disable */
/* eslint-disable */
/**
 * Lodgify Public API v2
 * API documentation for Lodgify Public API v2
 *
 * The version of the OpenAPI document: v2
 * Contact: development@lodgify.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllPropertiesAsync200Response,
  GetAllPropertiesAsync200ResponseItemsInner,
  GetAllPropertiesAsync400Response,
  V2PropertiesIdRoomsGet200ResponseInner,
} from '../models/index';
import {
    GetAllPropertiesAsync200ResponseFromJSON,
    GetAllPropertiesAsync200ResponseToJSON,
    GetAllPropertiesAsync200ResponseItemsInnerFromJSON,
    GetAllPropertiesAsync200ResponseItemsInnerToJSON,
    GetAllPropertiesAsync400ResponseFromJSON,
    GetAllPropertiesAsync400ResponseToJSON,
    V2PropertiesIdRoomsGet200ResponseInnerFromJSON,
    V2PropertiesIdRoomsGet200ResponseInnerToJSON,
} from '../models/index';

export interface GetAllDeletedAsyncRequest {
    deletedSince?: Date;
}

export interface GetAllPropertiesAsyncRequest {
    wid?: number;
    updatedSince?: Date;
    includeCount?: boolean;
    includeInOut?: boolean;
    page?: number;
    size?: number;
}

export interface GetPropertyByIdV2Request {
    id: number;
    wid?: number;
    includeInOut?: boolean;
}

export interface V2PropertiesIdRoomsGetRequest {
    id: number;
    wid?: number;
}

/**
 * 
 */
export class PropertiesApi extends runtime.BaseAPI {

    /**
     * Returns a paged list of all deleted properties since some date
     * Gets deleted properties
     */
    async getAllDeletedAsyncRaw(requestParameters: GetAllDeletedAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        if (requestParameters['deletedSince'] != null) {
            queryParameters['deletedSince'] = (requestParameters['deletedSince'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/deletedProperties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a paged list of all deleted properties since some date
     * Gets deleted properties
     */
    async getAllDeletedAsync(requestParameters: GetAllDeletedAsyncRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAllDeletedAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paged list of all properties
     * Properties info list
     */
    async getAllPropertiesAsyncRaw(requestParameters: GetAllPropertiesAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllPropertiesAsync200Response>> {
        const queryParameters: any = {};

        if (requestParameters['wid'] != null) {
            queryParameters['wid'] = requestParameters['wid'];
        }

        if (requestParameters['updatedSince'] != null) {
            queryParameters['updatedSince'] = (requestParameters['updatedSince'] as any).toISOString();
        }

        if (requestParameters['includeCount'] != null) {
            queryParameters['includeCount'] = requestParameters['includeCount'];
        }

        if (requestParameters['includeInOut'] != null) {
            queryParameters['includeInOut'] = requestParameters['includeInOut'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/properties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllPropertiesAsync200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a paged list of all properties
     * Properties info list
     */
    async getAllPropertiesAsync(requestParameters: GetAllPropertiesAsyncRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllPropertiesAsync200Response> {
        const response = await this.getAllPropertiesAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the basic info for a given property
     * Property info by Id
     */
    async getPropertyByIdV2Raw(requestParameters: GetPropertyByIdV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllPropertiesAsync200ResponseItemsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPropertyByIdV2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['wid'] != null) {
            queryParameters['wid'] = requestParameters['wid'];
        }

        if (requestParameters['includeInOut'] != null) {
            queryParameters['includeInOut'] = requestParameters['includeInOut'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/properties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllPropertiesAsync200ResponseItemsInnerFromJSON(jsonValue));
    }

    /**
     * Get the basic info for a given property
     * Property info by Id
     */
    async getPropertyByIdV2(requestParameters: GetPropertyByIdV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllPropertiesAsync200ResponseItemsInner> {
        const response = await this.getPropertyByIdV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all the roomtypes available for a given property
     * Available rooms
     */
    async v2PropertiesIdRoomsGetRaw(requestParameters: V2PropertiesIdRoomsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2PropertiesIdRoomsGet200ResponseInner>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v2PropertiesIdRoomsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['wid'] != null) {
            queryParameters['wid'] = requestParameters['wid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-ApiKey"] = await this.configuration.apiKey("X-ApiKey"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/properties/{id}/rooms`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2PropertiesIdRoomsGet200ResponseInnerFromJSON));
    }

    /**
     * Returns all the roomtypes available for a given property
     * Available rooms
     */
    async v2PropertiesIdRoomsGet(requestParameters: V2PropertiesIdRoomsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2PropertiesIdRoomsGet200ResponseInner>> {
        const response = await this.v2PropertiesIdRoomsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
