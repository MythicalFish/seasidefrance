---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { PropertyPage } from 'src/data/properties/types';

interface Props {
  property: PropertyPage;
  layout?: 'single' | 'gallery';
}

const { property, layout = 'single' } = Astro.props;
const {
  lodgify: { imageUrl },
} = property;
const imageInfo = property.roomInfo.images;
const images = import.meta.glob<{ default: ImageMetadata }>('/src/photos/**/*.{jpg,jpeg,png}');

const getMainImage = () => {
  if (!imageUrl) return null;
  const filename = imageUrl.split('/').pop()?.split('?')[0];
  const imagePath = Object.keys(images).find(
    (path) => path.includes(`/photos/${property.id}/`) && path.includes(filename || '')
  );
  return imagePath ? images[imagePath] : null;
};

const photos = Object.keys(images)
  .filter((imagePath) => imagePath.includes(`/photos/${property.id}/`))
  .map((filePath) => {
    const fileName = filePath.split('/').pop() || '';
    const fileInfo = imageInfo.find((info: any) => info.url.includes(fileName));
    const description = fileInfo?.text || '';
    return {
      filePath,
      fileName,
      description,
    };
  })
  .sort((a, b) => {
    return a.description.localeCompare(b.description);
  });

const mainPhoto = getMainImage()?.();
---

{
  !photos.length ? null : layout === 'single' && !!mainPhoto ? (
    <a href={`/${property.slug}`}>
      <Image src={mainPhoto} alt={photos[0].description} width={1200} height={800} class="photo" />
    </a>
  ) : (
    <div class="property-gallery">
      {
        <div class="gallery-grid">
          {photos.map(({ filePath, description }) => {
            return (
              <div class="gallery-item">
                <Image
                  src={images[filePath]()}
                  alt={description}
                  width={800}
                  height={600}
                  class="gallery-image"
                />
              </div>
            );
          })}
        </div>
      }
    </div>
  )
}

<style>
  .property-gallery {
    width: 100%;
  }

  .gallery-title {
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }

  .gallery-item {
    overflow: hidden;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .gallery-item:hover {
    transform: translateY(-5px);
  }

  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    aspect-ratio: 4/3;
    transition: transform 0.3s ease;
  }

  .gallery-item:hover .gallery-image {
    transform: scale(1.05);
  }

  .no-images {
    padding: 2rem;
    text-align: center;
    background-color: #f9f9f9;
    border-radius: 0.5rem;
  }

  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }

  @media (max-width: 480px) {
    .gallery-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
