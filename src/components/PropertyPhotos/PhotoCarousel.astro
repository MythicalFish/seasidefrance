---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { PropertyPage } from '@data/properties/types';

interface Props {
  property: PropertyPage;
  showFirstPhoto?: boolean;
}

const { property, showFirstPhoto = true } = Astro.props;
const {
  lodgify: { imageUrl },
} = property;
const imageInfo = property.roomInfo.images;
const images = import.meta.glob<{ default: ImageMetadata }>('/src/images/photos/**/*.{jpg,jpeg,png}', {
  eager: true,
});

const getMainImage = () => {
  if (!imageUrl) return null;
  const filename = imageUrl.split('/').pop()?.split('?')[0];
  const imagePath = Object.keys(images).find(
    (path) => path.includes(`/photos/${property.id}/`) && path.includes(filename || '')
  );
  return imagePath ? { 
    filePath: imagePath, 
    fileName: filename || '', 
    description: 'Main image', 
    image: images[imagePath].default 
  } : null;
};

let allPhotos = Object.keys(images)
  .filter((imagePath) => imagePath.includes(`/photos/${property.id}/`))
  .map((filePath) => {
    const fileName = filePath.split('/').pop() || '';
    const fileInfo = imageInfo.find((info: any) => info.url.includes(fileName));
    const description = fileInfo?.text || '';
    return {
      filePath,
      fileName,
      description,
      image: images[filePath].default,
    };
  })
  .sort((a, b) => {
    return a.description.localeCompare(b.description);
  });

// Get the main image and move it to the front if it exists
const mainImage = getMainImage();
if (mainImage) {
  // Remove main image from allPhotos if it exists there
  allPhotos = allPhotos.filter(photo => photo.filePath !== mainImage.filePath);
  // Add main image to the front
  allPhotos.unshift(mainImage);
}

const carouselId = `carousel-${property.id}`;
---

<div class="property-photo-carousel">
  {allPhotos.length > 0 && (
    <div class="photo-gallery">
      <div class={`swiper main-swiper ${carouselId}`}>
        <div class="swiper-wrapper">
          {allPhotos.map((photo, index) => (
            <div class="swiper-slide">
              <Picture
                src={photo.image}
                alt={photo.description || ''}
                width={810}
                height={540}
                class="main-image"
              />
            </div>
          ))}
        </div>
        
        <!-- Navigation buttons -->
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
      </div>

      <!-- Thumbnail Strip -->
      <div class="thumbnail-container">
        <div class="thumbnail-strip">
          {allPhotos.map((photo, index) => (
            <button 
              class={`thumbnail ${index === 0 ? 'active' : ''}`}
              data-slide-index={index}
              type="button"
            >
              <Picture
                src={photo.image}
                alt={photo.description || ''}
                width={150}
                height={100}
                class="thumbnail-image"
              />
            </button>
          ))}
        </div>
      </div>
    </div>
  )}
</div>

<style>
  .property-photo-carousel {
    width: 100%;
  }

  .photo-gallery {
    width: 100%;
  }

  /* Main Swiper Styles */
  .main-swiper {
    width: 100%;
    height: 540px;
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .main-swiper .swiper-slide {
    display: flex;
    justify-content: center;
    align-items: center;
    background: #f8f9fa;
  }

  .main-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .swiper-button-next,
  .swiper-button-prev {
    color: #fff;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 50%;
    width: 44px;
    height: 44px;
    transition: all 0.3s ease;
  }

  .swiper-button-next:hover,
  .swiper-button-prev:hover {
    background: rgba(0, 0, 0, 0.8);
  }

  .swiper-button-next:after,
  .swiper-button-prev:after {
    font-size: 18px;
  }

  /* Thumbnail Strip Styles */
  .thumbnail-container {
    width: 100%;
    padding: 0.5rem 0;
  }

  .thumbnail-strip {
    display: flex;
    gap: 0.5rem;
    overflow-x: auto;
    padding: 0.5rem;
    scrollbar-width: thin;
    scrollbar-color: #cbd5e0 #f7fafc;
  }

  .thumbnail-strip::-webkit-scrollbar {
    height: 6px;
  }

  .thumbnail-strip::-webkit-scrollbar-track {
    background: #f7fafc;
    border-radius: 3px;
  }

  .thumbnail-strip::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 3px;
  }

  .thumbnail-strip::-webkit-scrollbar-thumb:hover {
    background: #a0aec0;
  }

  .thumbnail {
    position: relative;
    flex: 0 0 auto;
    width: 120px;
    height: 80px;
    border: 2px solid transparent;
    border-radius: 6px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s ease;
    background: none;
    padding: 0;
  }

  .thumbnail:hover {
    border-color: #e2e8f0;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .thumbnail.active {
    border-color: #3b82f6;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
  }

  .thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .main-badge {
    position: absolute;
    top: 4px;
    left: 4px;
    background: #3b82f6;
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    padding: 2px 6px;
    border-radius: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  @media (max-width: 768px) {
    .main-swiper {
      height: 400px;
    }
    
    .thumbnail {
      width: 100px;
      height: 67px;
    }
    
    .main-badge {
      font-size: 0.625rem;
      padding: 1px 4px;
    }
  }

  @media (max-width: 480px) {
    .main-swiper {
      height: 300px;
    }
    
    .thumbnail {
      width: 80px;
      height: 53px;
    }
  }
</style>

<script>
  import Swiper from 'swiper';
  import { Navigation, Mousewheel } from 'swiper/modules';
  import 'swiper/css';
  import 'swiper/css/navigation';

  // Initialize all carousels on the page
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.main-swiper');
    
    // Add 2 second delay before initialization
    setTimeout(() => {
      carousels.forEach((carousel) => {
        // Get thumbnails for this carousel first
        const thumbnails = carousel.parentElement?.querySelectorAll('.thumbnail');
        
        function updateActiveThumbnail(activeIndex: number) {
          if (thumbnails) {
            thumbnails.forEach((thumb, index) => {
              const isActive = index === activeIndex;
              thumb.classList.toggle('active', isActive);
              if (isActive) {
                thumb.scrollIntoView({
                  behavior: 'smooth',
                  block: 'nearest',
                  inline: 'center'
                });
              }
            });
          }
        }

        const swiper = new Swiper(carousel as HTMLElement, {
          modules: [Navigation, Mousewheel],
          slidesPerView: 1,
          spaceBetween: 0,
          loop: true,
          autoplay: false,
          mousewheel: {
            enabled: true,
            forceToAxis: true,
            sensitivity: 1,
            releaseOnEdges: true,
            thresholdDelta: 10,
            thresholdTime: 600,
          },
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
          on: {
            slideChange: function(swiper) {
              updateActiveThumbnail(swiper.realIndex);
            }
          }
        });
        
        if (thumbnails) {
          thumbnails.forEach((thumbnail, index) => {
            thumbnail.addEventListener('click', () => {
              const currentSpeed = swiper.params.speed;
              swiper.params.speed = 0; // Disable animation for the jump
              swiper.slideToLoop(index);
              // Restore speed after a very short delay to ensure the jump is instant
              setTimeout(() => {
                swiper.params.speed = currentSpeed;
              }, 50); // 50ms should be enough
            });
          });
        }
      });
    }, 2000);
  });
</script> 